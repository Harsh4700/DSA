class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def insert(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            current = self.head
            while current.next is not None:
                current = current.next
            current.next = new_node
    def delete(self, key):
        self.head = self._delete_recursive(self.head, key)
    def _delete_recursive(self, current, key):
        # Base case: if the list is empty
        if current is None:
            return current
        if current.data == key:
            next_node = current.next
            current = None
            return next_node
        current.next = self._delete_recursive(current.next, key)
        return current
    def display(self):
        current = self.head
        while current is not None:
            print(current.data, end=" ")
            current = current.next
        print()
linked_list = LinkedList()
linked_list.insert(1)
linked_list.insert(2)
linked_list.insert(3)
linked_list.insert(4)
linked_list.insert(5)
print("Original Linked List:")
linked_list.display()
# Deleting node with data=3 using recursion
linked_list.delete(3)
print("Linked List after deleting node with data=3:")
linked_list.display()
