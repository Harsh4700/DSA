class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
def remove_consecutive_duplicates(head):
    # Handle edge cases where head is None or the list is empty
    if not head or not head.next:
        return head
    # Create a dummy node to handle the case of removing the first node
    dummy = ListNode(0)
    dummy.next = head
    prev = dummy
    curr = head
    while curr and curr.next:
        if curr.val == curr.next.val:
            # Move curr to the next distinct element
            while curr and curr.next and curr.val == curr.next.val:
                curr = curr.next
            # Remove the duplicates by updating the pointers
            prev.next = curr.next
            curr = curr.next
        else:
            # Move both prev and curr to the next node
            prev = prev.next
            curr = curr.next
    return dummy.next
